#include <iostream>
#include <iomanip>
#include <algorithm>
#include <climits>

using namespace std;

struct Process {
    int id;
    int arrivalTime;
    int burstTime;
    int waitingTime;
};

struct Schedule {
    int *processId;
    int *startTime;
    int *endTime;
    int totalSlots;
};

bool sortByArrivalTime(const Process& a, const Process& b) {
    return a.arrivalTime < b.arrivalTime;
}

bool sortByBurstTime(const Process& a, const Process& b) {
    return a.burstTime < b.burstTime;
}

Process *inputProcesses(int &n) {
    Process *processes = new Process[n];

    cout << "Enter the arrival time and burst time for each process:\n";
    for (int i = 0; i < n; i++) {
        cout << "Process " << i + 1 << ":\n";
        cout << "Arrival time: ";
        cin >> processes[i].arrivalTime;
        cout << "Burst time: ";
        cin >> processes[i].burstTime;
        processes[i].id = i + 1;
        processes[i].waitingTime = 0;
    }

    return processes;
}

void printProcesses(Process *processes, int n) {
    cout << left << setw(15) << "Process";
    cout << left << setw(15) << "Arrival";
    cout << left << setw(15) << "Burst";
    cout << left << setw(15) << "Waiting" << endl;

    for (int i = 0; i < n; i++) {
        cout << left << setw(15) << processes[i].id;
        cout << left << setw(15) << processes[i].arrivalTime;
        cout << left << setw(15) << processes[i].burstTime;
        cout << left << setw(15) << processes[i].waitingTime << endl;
    }
    cout << "\n-------------------------------------------------\n";
}
Schedule FCFS(Process *processes, int n) {
    sort(processes, processes + n, sortByArrivalTime);

    int *finishTime = new int[n];
    int *waitingTime = new int[n];

    finishTime[0] = processes[0].burstTime;
    waitingTime[0] = 0;

    for (int i = 1; i < n; i++) {
        finishTime[i] = max(processes[i].arrivalTime, finishTime[i - 1]) + processes[i].burstTime;
        waitingTime[i] = max(0, finishTime[i - 1] - processes[i].arrivalTime);
    }

    Schedule schedule;
    schedule.processId = new int[n];
    schedule.startTime = new int[n];

    for (int i = 0; i < n; i++) {
        schedule.processId[i] = i + 1;
        schedule.startTime[i] = finishTime[i] - processes[i].burstTime;
    }

    schedule.totalSlots = n;

    for (int i = 0; i < n; i++) {
        processes[i].waitingTime = waitingTime[i];
    }

    delete[] finishTime;
    delete[] waitingTime;

    return schedule;
}

Schedule SJF(Process *processes, int n) {
    sort(processes, processes + n, sortByArrivalTime);

    int *finishTime = new int[n];
    int *waitingTime = new int[n];

    for (int i = 0; i < n; i++) {
        finishTime[i] = -1;
        waitingTime[i] = 0;
    }

    int currentTime = 0;
    int completed = 0;
    int shortest = 0;
    int minBurstTime = INT_MAX;
    bool allArrived = false;

    while (completed != n) {
        for (int i = 0; i < n; i++) {
            if (processes[i].arrivalTime <= currentTime && finishTime[i] == -1) {
                allArrived = true;
                if (processes[i].burstTime < minBurstTime) {
                    minBurstTime = processes[i].burstTime;
                    shortest = i;
                }
            }
        }

        if (!allArrived) {
            currentTime++;
            continue;
        }

        finishTime[shortest] = currentTime + processes[shortest].burstTime;
        waitingTime[shortest] = finishTime[shortest] - processes[shortest].arrivalTime - processes[shortest].burstTime;
        if (waitingTime[shortest] < 0) {
            waitingTime[shortest] = 0;
        }

        currentTime = finishTime[shortest];
        completed++;
        minBurstTime = INT_MAX;
        allArrived = false;
    }

    Schedule schedule;
    schedule.processId = new int[n];
    schedule.startTime = new int[n];

    for (int i = 0; i < n; i++) {
        schedule.processId[i] = i + 1;
        schedule.startTime[i] = finishTime[i] - processes[i].burstTime;
    }

    schedule.totalSlots = n;

    for (int i = 0; i < n; i++) {
        processes[i].waitingTime = waitingTime[i];
    }

    delete[] finishTime;
    delete[] waitingTime;

    return schedule;
}

Schedule SRT(Process *processes, int n) {
    int *remainingTime = new int[n];
    for (int i = 0; i < n; i++) {
        remainingTime[i] = processes[i].burstTime;
    }

    int complete = 0;
    int currentTime = 0;

    Schedule schedule;
    schedule.processId = new int[n];
    schedule.startTime = new int[n];

    int currentProcess = -1;
    int currentStartTime = -1;

    cout << "\n---------Bieu do Grant---------------------------------------------\n";
    cout << left << setw(4) << " ";
    cout << left << setw(10) << "Time";
    cout << left << setw(8) << "Process" << endl;

    while (complete != n) {
        int shortest = -1;
        int minTime = INT_MAX;

        for (int i = 0; i < n; i++) {
            if (processes[i].arrivalTime <= currentTime && remainingTime[i] < minTime && remainingTime[i] > 0) {
                minTime = remainingTime[i];
                shortest = i;
            }
        }

        if (shortest == -1) {
            currentTime++;
            continue;
        }

        if (currentProcess != shortest) {
            if (currentProcess != -1) {
                cout << left << setw(4) << currentStartTime;
                cout << left << setw(4) << "->";
                cout << left << setw(4) << currentTime << ":";
                cout << left << setw(4) << "P" << processes[currentProcess].id << endl;
            }

            currentProcess = shortest;
            currentStartTime = currentTime;
        }

        remainingTime[shortest]--;

        if (remainingTime[shortest] == 0) {
            complete++;
            int finishTime = currentTime + 1;
            processes[shortest].waitingTime = finishTime - processes[shortest].arrivalTime - processes[shortest].burstTime;

            if (processes[shortest].waitingTime < 0) {
                processes[shortest].waitingTime = 0;
            }

            cout << left << setw(4) << currentStartTime;
            cout << left << setw(4) << "->";
            cout << left << setw(4) << finishTime << ":";
            cout << left << setw(4) << "P" << processes[currentProcess].id << endl;

            currentProcess = -1;
        }

        currentTime++;
    }

    if (currentProcess != -1) {
        cout << left << setw(4) << currentStartTime;
        cout << left << setw(4) << "->";
        cout << left << setw(4) << currentTime << ":";
        cout << left << setw(4) << "P" << processes[currentProcess].id << endl;
    }

    cout << "\n-----------------------------------------------------\n";

    schedule.totalSlots = n;

    delete[] remainingTime;

    return schedule;
}

Schedule RR(Process *processes, int n, int quantum) {
    sort(processes,processes+n,sortByArrivalTime);
    int *remainingTime = new int[n];
    for (int i = 0; i < n; i++) {
        remainingTime[i] = processes[i].burstTime;
    }

    int complete = 0;
    int currentTime = 0;
    cout << "\n---------Bieu do Grant---------------------------------------------\n";
    cout << left << setw(4) << " ";
    cout << left << setw(10) << "Time";
    cout << left << setw(8) << "Process" << endl;
    while (complete != n) {
        bool allDone = true;
        for (int i = 0; i < n; i++) {
            if (processes[i].arrivalTime <= currentTime && remainingTime[i] > 0) {
                string s = "P"; s+=(processes[i].id+48);
                cout << left << setw(4) << currentTime;
                cout << left << setw(4) << "->";
                allDone = false;
                if (remainingTime[i] > quantum) {
                    currentTime += quantum;
                    remainingTime[i] -= quantum;
                } else {
                    currentTime += remainingTime[i];
                    processes[i].waitingTime = currentTime - processes[i].arrivalTime - processes[i].burstTime;
                    if (processes[i].waitingTime < 0) {
                        processes[i].waitingTime = 0;
                    }
                    remainingTime[i] = 0;
                    complete++;
                }
                cout << left << setw(4) << currentTime;
                cout << left << setw(4) << ":";
                cout << left << setw(4) << s << endl;
            }
            
        }
        if (allDone) {
            currentTime++;
        }
    }
    cout << "\n-----------------------------------------------------\n";
    Schedule schedule;
    schedule.processId = new int[n];
    schedule.startTime = new int[n];

    for (int i = 0; i < n; i++) {
        schedule.processId[i] = i + 1;
        schedule.startTime[i] = processes[i].arrivalTime;
    }

    schedule.totalSlots = n;

    delete[] remainingTime;

    return schedule;
}


void printSchedule(Schedule schedule ,Process *process,int n) {
    int tong = 0;
    for(int i = 0; i < n; i++) tong +=  process[i].burstTime;
    for (int i = 0; i < schedule.totalSlots-1; i++) {
        for(int j = i+1; j < schedule.totalSlots; j++) {
            if(schedule.startTime[i] > schedule.startTime[j]) {
                swap(schedule.startTime[i],schedule.startTime[j]);
                swap(schedule.endTime[i],schedule.endTime[j]);
                swap(schedule.processId[i],schedule.processId[j]);
            }
        }
    }
    
    cout << "\n-----------------------------------------------------------------\n";
    //in bieu do grant
    cout << "Bieu do Grant:\n";
    cout << left << setw(4) << " ";
    cout << left << setw(10) << "Time";
    cout << left << setw(8) << "Process" << endl;
    for(int i = 0; i < schedule.totalSlots;i++) {
        string s = "P"; s+=(schedule.processId[i]+48);
        cout << left << setw(4) << schedule.startTime[i];
        cout << left << setw(4) << "->";
        if(i==schedule.totalSlots-1) {
            cout << left << setw(4) << tong;
        }
        else {
            cout << left << setw(4) << schedule.startTime[i+1];
        }
        cout << left << setw(4) << ":";
        cout << left << setw(4) << s << endl;   
    }
    cout << "\n-----------------------------------------------------------------\n";
}

float calculateAverageWaitingTime(Process *processes, int n) {
    float totalWaitingTime = 0;
    for (int i = 0; i < n; i++) {
        totalWaitingTime += processes[i].waitingTime;
    }
    return totalWaitingTime / n;
}

int main() {
    int n, choice;
    cout << "Nhap so tien trinh: ";
    cin >> n;

    Process *processes = inputProcesses(n);

    cout << "Chon thuat toan:\n";
    cout << "1. FCFS\n";
    cout << "2. SJF\n";
    cout << "3. SRT\n";
    cout << "4. RR\n";
    cout << "Nhap lua chon cua ban: ";
    cin >> choice;

    Schedule schedule;
    float averageWaitingTime;

    switch (choice) {
        case 1:
            schedule = FCFS(processes, n);
            averageWaitingTime = calculateAverageWaitingTime(processes, n);
            break;
        case 2:
            schedule = SJF(processes, n);
            averageWaitingTime = calculateAverageWaitingTime(processes, n);
            break;
        case 3:
            schedule = SRT(processes, n);
            averageWaitingTime = calculateAverageWaitingTime(processes, n);
            break;
        case 4:
            int quantum;
            cout << "Nhap thoi quan (quantum): ";
            cin >> quantum;
            schedule = RR(processes, n, quantum);
            averageWaitingTime = calculateAverageWaitingTime(processes, n);
            break;
        default:
            cout << "Lua chon khong hop le.";
            return 0;
    }

    printProcesses(processes, n);
    if(choice!=4 && choice!=3) printSchedule(schedule,processes,n);
    cout << "Thoi gian cho trung binh: " << averageWaitingTime << endl;

    delete[] processes;
    delete[] schedule.processId;
    delete[] schedule.startTime;

    return 0;
}